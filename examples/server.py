"""
EN: This file is an example of a FastMCP server generated by `openapi2mcp`
based on an OpenAPI specification (e.g., a PetStore-like API).
It demonstrates the basic structure:
- Pydantic models generated from OpenAPI schemas.
- MCP resources (typically for GET operations) and tools (for other operations like POST, PUT, DELETE).
- Initialization of the FastMCP application (`app = mcp.Mcp(...)`).
- Registration of resources and tools.
- A main block to run the server (e.g., using STDIO transport).

Users can modify this generated file to implement the actual logic for each resource and tool.

RU: Этот файл представляет собой пример сервера FastMCP, сгенерированного `openapi2mcp`
на основе спецификации OpenAPI (например, API, подобного PetStore).
Он демонстрирует базовую структуру:
- Модели Pydantic, сгенерированные из схем OpenAPI.
- Ресурсы MCP (обычно для операций GET) и инструменты (для других операций, таких как POST, PUT, DELETE).
- Инициализация приложения FastMCP (`app = mcp.Mcp(...)`).
- Регистрация ресурсов и инструментов.
- Основной блок для запуска сервера (например, с использованием транспорта STDIO).

Пользователи могут изменять этот сгенерированный файл для реализации фактической логики каждого ресурса и инструмента.
"""
from __future__ import annotations

import fastmcp as mcp
from pydantic import BaseModel, Field # EN: Added Field for potential future use if descriptions are added to fields. RU: Добавлен Field для потенциального использования в будущем, если к полям будут добавлены описания.
from typing import List, Optional, Any, Dict # EN: Standard typing imports. RU: Стандартные импорты для типизации.

# EN: Pydantic models generated from OpenAPI schemas.
# RU: Модели Pydantic, сгенерированные из схем OpenAPI.
class Pet(BaseModel):
    """
    EN: Represents a pet in the store. Generated from the 'Pet' schema in OpenAPI.
    RU: Представляет домашнее животное в магазине. Сгенерировано из схемы 'Pet' в OpenAPI.
    """
    id: int # EN: Pet identifier. RU: Идентификатор питомца.
    name: str # EN: Name of the pet. RU: Имя питомца.
    tag: str | None = None # EN: Optional tag for the pet. RU: Необязательный тег для питомца.

class Error(BaseModel):
    """
    EN: Represents an error response. Generated from the 'Error' schema in OpenAPI.
    RU: Представляет ответ об ошибке. Сгенерировано из схемы 'Error' в OpenAPI.
    """
    code: int # EN: Error code. RU: Код ошибки.
    message: str # EN: Error message. RU: Сообщение об ошибке.

# EN: Initialize the FastMCP application.
# EN: The `name` and `version` are typically derived from the OpenAPI specification's `info` section.
# EN: `llm_tools` explicitly lists functions decorated with `@app.tool` to make them available for LLM interaction.
# RU: Инициализация приложения FastMCP.
# RU: `name` и `version` обычно извлекаются из раздела `info` спецификации OpenAPI.
# RU: `llm_tools` явно перечисляет функции, декорированные `@app.tool`, чтобы сделать их доступными для взаимодействия с LLM.
app = mcp.Mcp(
    name="Example Pet Store API", # EN: API name, from OpenAPI info.title. RU: Имя API, из OpenAPI info.title.
    version="1.0.1",             # EN: API version, from OpenAPI info.version. RU: Версия API, из OpenAPI info.version.
    llm_tools=[create_pet, update_pet, delete_pet] # EN: Explicitly list tools for LLM discovery. RU: Явное перечисление инструментов для обнаружения LLM.
)

# EN: Resources are typically used for GET operations to retrieve data.
# RU: Ресурсы обычно используются для операций GET для получения данных.
@app.resource
def list_pets(limit: int | None = None) -> List[Pet]:
    """
    EN: List all pets. Returns a list of all pets in the store. Supports pagination using the 'limit' parameter.
    RU: Список всех питомцев. Возвращает список всех питомцев в магазине. Поддерживает пагинацию с помощью параметра 'limit'.
    """
    # EN: TODO: Implement the actual logic to fetch and return a list of pets.
    # EN: Example:
    # EN: pets_data = your_data_source.get_all_pets(limit=limit)
    # EN: return [Pet(**p) for p in pets_data]
    # RU: TODO: Реализуйте фактическую логику для получения и возврата списка питомцев.
    # RU: Пример:
    # RU: pets_data = ваш_источник_данных.get_all_pets(limit=limit)
    # RU: return [Pet(**p) for p in pets_data]
    pass


@app.resource
def show_pet_by_id(pet_id: str, version: str | None = None) -> Pet:
    """
    EN: Info for a specific pet. Retrieves the details of a specific pet by its ID.
    RU: Информация о конкретном питомце. Получает детали конкретного питомца по его ID.
    """
    # EN: `pet_id` is a path parameter. `version` could be a query or header parameter.
    # EN: `ctx` (mcp.Context) can be added as the first argument to access request details if needed.
    # RU: `pet_id` - это параметр пути. `version` может быть параметром запроса или заголовка.
    # RU: `ctx` (mcp.Context) можно добавить первым аргументом для доступа к деталям запроса при необходимости.
    # EN: TODO: Implement the actual logic to fetch and return the pet by its ID.
    # EN: Example:
    # EN: pet_data = your_data_source.get_pet(pet_id)
    # EN: if pet_data:
    # EN:     return Pet(**pet_data)
    # EN: else:
    # EN:     raise mcp.exceptions.ResourceNotFound(f"Pet with ID {pet_id} not found")
    # RU: TODO: Реализуйте фактическую логику для получения и возврата питомца по его ID.
    # RU: Пример:
    # RU: pet_data = ваш_источник_данных.get_pet(pet_id)
    # RU: if pet_data:
    # RU:     return Pet(**pet_data)
    # RU: else:
    # RU:     raise mcp.exceptions.ResourceNotFound(f"Питомец с ID {pet_id} не найден")
    pass

# EN: Tools are typically used for operations that modify data (POST, PUT, DELETE, PATCH).
# RU: Инструменты обычно используются для операций, изменяющих данные (POST, PUT, DELETE, PATCH).
@app.tool
def create_pet(ctx: mcp.Context, pet: Pet) -> Pet:
    """
    EN: Create a pet. Creates a new pet in the store.
    RU: Создать питомца. Создает нового питомца в магазине.
    """
    # EN: `ctx` (mcp.Context) provides access to request context (headers, etc.) and can be used for LLM interaction (e.g., ctx.sample()).
    # EN: `pet: Pet` is the request body, automatically parsed and validated by Pydantic.
    # RU: `ctx` (mcp.Context) предоставляет доступ к контексту запроса (заголовки и т.д.) и может использоваться для взаимодействия с LLM (например, ctx.sample()).
    # RU: `pet: Pet` - это тело запроса, автоматически разбираемое и валидируемое Pydantic.
    # EN: TODO: Implement the actual logic to create the pet and return the created pet data.
    # EN: Example:
    # EN: created_pet_data = your_data_source.create_new_pet(pet.model_dump())
    # EN: return Pet(**created_pet_data)
    # RU: TODO: Реализуйте фактическую логику для создания питомца и возврата данных созданного питомца.
    # RU: Пример:
    # RU: created_pet_data = ваш_источник_данных.create_new_pet(pet.model_dump())
    # RU: return Pet(**created_pet_data)
    pass


@app.tool
def update_pet(ctx: mcp.Context, pet_id: str, pet: Pet) -> Pet:
    """
    EN: Update an existing pet. Updates an existing pet by ID.
    RU: Обновить существующего питомца. Обновляет существующего питомца по ID.
    """
    # EN: `pet_id` would typically be a path parameter, handled by FastMCP based on the OpenAPI spec's path.
    # EN: The generator would map this to the tool's arguments if specified in `parameters` of the OpenAPI operation.
    # EN: If `pet_id` is not automatically passed from path, you might need to adjust the tool signature
    # EN: or access it from `ctx` if available (e.g., if passed as a query/header or part of a different model).
    # RU: `pet_id` обычно является параметром пути, обрабатываемым FastMCP на основе пути спецификации OpenAPI.
    # RU: Генератор сопоставил бы это с аргументами инструмента, если указано в `parameters` операции OpenAPI.
    # RU: Если `pet_id` не передается автоматически из пути, возможно, потребуется скорректировать сигнатуру инструмента
    # RU: или получить к нему доступ из `ctx`, если он доступен (например, если передан как query/header или часть другой модели).
    # EN: TODO: Implement the actual logic to update the pet.
    # RU: TODO: Реализуйте фактическую логику для обновления питомца.
    pass


@app.tool
def delete_pet(ctx: mcp.Context, pet_id: str) -> None:
    """
    EN: Deletes a pet. Deletes a specific pet by its ID.
    RU: Удалить питомца. Удаляет конкретного питомца по его ID.
    """
    # EN: `pet_id` is expected to be a path parameter.
    # EN: Return type is `None` indicating a successful deletion usually results in a 204 No Content response.
    # RU: `pet_id` ожидается как параметр пути.
    # RU: Тип возвращаемого значения `None` указывает, что успешное удаление обычно приводит к ответу 204 No Content.
    # EN: TODO: Implement the actual logic to delete the pet.
    # RU: TODO: Реализуйте фактическую логику для удаления питомца.
    pass


# EN: Register resources explicitly. This section might be generated if decorators are not used
# EN: or for more complex registration scenarios. The `if 'name' in locals()` check
# EN: is a safeguard to ensure the function exists before trying to register it.
# RU: Явная регистрация ресурсов. Этот раздел может быть сгенерирован, если декораторы не используются
# RU: или для более сложных сценариев регистрации. Проверка `if 'name' in locals()`
# RU: является мерой предосторожности, чтобы убедиться, что функция существует перед попыткой ее регистрации.
if 'list_pets' in locals():
    app.add_resource(list_pets)
if 'show_pet_by_id' in locals():
    app.add_resource(show_pet_by_id)

# EN: This block executes when the script is run directly.
# RU: Этот блок выполняется, когда скрипт запускается напрямую.
if __name__ == "__main__":
    # EN: `app.run_stdio()` starts the server using STDIO transport (standard input/output).
    # EN: This is common for simple MCP agents or local testing.
    # EN: For other transports (e.g., HTTP, Google Pub/Sub), you would replace `run_stdio()`
    # EN: with the appropriate run method and configuration for that transport.
    # RU: `app.run_stdio()` запускает сервер с использованием транспорта STDIO (стандартный ввод/вывод).
    # RU: Это характерно для простых MCP-агентов или локального тестирования.
    # RU: Для других транспортов (например, HTTP, Google Pub/Sub) вы бы заменили `run_stdio()`
    # RU: соответствующим методом запуска и конфигурацией для этого транспорта.
    app.run_stdio()
